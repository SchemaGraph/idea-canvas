type Graph {
  id: ID!
  name: String
  patches: [Patch!]
}

type Patch {
  graphId: ID!
  seq: Int!
  id: String!
  createdAt: String!
  payload: String!
  client: String!
  action: String
}

input PatchInput {
  seq: Int!
  payload: String!
  client: String!
  action: String
}

type Query {
  getGraph(id: ID!): Graph
  getPatch(id: ID!): Patch
  getPatches(graphId: ID!, since: Int!): [Patch!]
}
type Mutation {
  createGraph(id: ID!, name: String, patches: [PatchInput]): Graph!
 	deleteGraph(id: ID!): Graph!
  createPatch(graphId: ID!, patch: PatchInput!): Patch!
  addPatches(graph: ID!, patches: [PatchInput]): [Patch!]!
 	deletePatches(graphId: ID!, seqs: [Int!]!): [Patch]
}

type Subscription {
  onCreatePatch(graphId: ID!): Patch @aws_subscribe(mutations: ["createPatch"])
  onAddPatches: [Patch!]! @aws_subscribe(mutations: ["addPatches"])
  onCreateGraph: Graph! @aws_subscribe(mutations: ["createGraph"])
}
